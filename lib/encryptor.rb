class KeyGenerator
  attr_reader :key

  def initialize(key = nil)
    @key = key
    if key.nil?
      random_generator
    else
      invalid_key(@key)
    end
  end

  def invalid_key(input)
    key = input.downcase
    if (input =~ /[a-z]/) || (input.size != 5)
      puts "Your key is invalid, we're giving you a new one!"
      random_generator
    else
      @key
    end
  end

  def random_generator
    array = [(0..4).map{rand(0..9)}]
    @key = array.join.rjust(5, "0").to_s
  end

end






























# class Encryptor
#
#   def encrypt_letter(letter, rotation)
#     cipher_for_rotation = cipher(rotation)  # => {" "=>"M", "!"=>"N", "\""=>"O", "#"=>"P", "$"=>"Q", "%"=>"R", "&"=>"S", "'"=>"T", "("=>"U", ")"=>"V", "*"=>"W", "+"=>"X", ","=>"Y", "-"=>"Z", "."=>"[", "/"=>"\\", "0"=>"]", "1"=>"^", "2"=>"_", "3"=>"`", "4"=>"a", "5"=>"b", "6"=>"c", "7"=>"d", "8"=>"e", "9"=>"f", ":"=>"g", ";"=>"h", "<"=>"i", "="=>"j", ">"=>"k", "?"=>"l", "@"=>"m", "A"=>"n", "B"=>"o", "C"=>"p", "D"=>"q", "E"=>"r", "F"=>"s", "G"=>"t", "H"=>"u", "I"=>"v", "J"=>"w", "K"=>"x", "L"=>"y", "M"=>"z", "N"=>" ", "O"=>"!", "P"=>"\"", "Q"=>"#", "R"=>"$", "S"=>"%", "T"=>"&", "U"=>"'", "V"=>"(", "W"=>")", "X"=>"*", "Y"=>"+", "Z"=>",", "["=>"-", "\\"=>".", "]"=>"/", "^"=>"0", "_"=>"1", "`"=>"2", "a"=>"3", "b"=>"4", "c"=>"5", "d"=>"6", "e"=>"7", "f"=>"8", "g"=>"9", "h"=>":", "i"=>";", "j"=>"<", "k"=>"=", "l"=>">", "m"=>"?", "n"=>"@", "o"=>"A", "p"=>"B", "q"=>"C", "r"=>"D", "s"=>"E", "t"=>"F", "u"=>"G", "v"=>"H", "w"=>"I", "x"=>"J", "y"=>"K", "z"=>"L"}, {" "=>"M", "!"=>"N", "\""=>"O", ...
#     cipher_for_rotation[letter]             # => ":", "7", ">", ">", "A", "M", "F", ":", ";", "E", "M", ";", "E", "M", "F", ":", "7", "M", "4", "7", "E", "F", "h", "e", "l", "l", "o", " ", "t", "h", "i", "s", " ", "i", "s", " ", "t", "h", "e", " ", "b", "e", "s", "t"
#   end                                       # => :encrypt_letter
#
#   def encrypt(string, rotation)
#     letters = string.split("")          # => ["h", "e", "l", "l", "o", " ", "t", "h", "i", "s", " ", "i", "s", " ", "t", "h", "e", " ", "b", "e", "s", "t"], [":", "7", ">", ">", "A", "M", "F", ":", ";", "E", "M", ";", "E", "M", "F", ":", "7", "M", "4", "7", "E", "F"]
#     letters.collect do |letter|         # => ["h", "e", "l", "l", "o", " ", "t", "h", "i", "s", " ", "i", "s", " ", "t", "h", "e", " ", "b", "e", "s", "t"], [":", "7", ">", ">", "A", "M", "F", ":", ";", "E", "M", ";", "E", "M", "F", ":", "7", "M", "4", "7", "E", "F"]
#       encrypt_letter(letter, rotation)  # => ":", "7", ">", ">", "A", "M", "F", ":", ";", "E", "M", ";", "E", "M", "F", ":", "7", "M", "4", "7", "E", "F", "h", "e", "l", "l", "o", " ", "t", "h", "i", "s", " ", "i", "s", " ", "t", "h", "e", " ", "b", "e", "s", "t"
#     end.join                            # => ":7>>AMF:;EM;EMF:7M47EF", "hello this is the best"
#   end                                   # => :encrypt
#
#   def cipher(rotation)
#     characters = (' '..'z').to_a                      # => [" ", "!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"], [" ", "!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"], [" ", "!", "\"", "#"...
#     rotated_characters = characters.rotate(rotation)  # => ["M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", " ", "!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L"], ["M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", " ", "!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L"], ["M", "N", "O", "P",...
#     Hash[characters.zip(rotated_characters)]          # => {" "=>"M", "!"=>"N", "\""=>"O", "#"=>"P", "$"=>"Q", "%"=>"R", "&"=>"S", "'"=>"T", "("=>"U", ")"=>"V", "*"=>"W", "+"=>"X", ","=>"Y", "-"=>"Z", "."=>"[", "/"=>"\\", "0"=>"]", "1"=>"^", "2"=>"_", "3"=>"`", "4"=>"a", "5"=>"b", "6"=>"c", "7"=>"d", "8"=>"e", "9"=>"f", ":"=>"g", ";"=>"h", "<"=>"i", "="=>"j", ">"=>"k", "?"=>"l", "@"=>"m", "A"=>"n", "B"=>"o", "C"=>"p", "D"=>"q", "E"=>"r", "F"=>"s", "G"=>"t", "H"=>"u", "I"=>"v", "J"=>"w", "K"=>"x", "L"=>"y", "M"=>"z", "N"=>" ", "O"=>"!", "P"=>"\"", "Q"=>"#", "R"=>"$", "S"=>"%", "T"=>"&", "U"=>"'", "V"=>"(", "W"=>")", "X"=>"*", "Y"=>"+", "Z"=>",", "["=>"-", "\\"=>".", "]"=>"/", "^"=>"0", "_"=>"1", "`"=>"2", "a"=>"3", "b"=>"4", "c"=>"5", "d"=>"6", "e"=>"7", "f"=>"8", "g"=>"9", "h"=>":", "i"=>";", "j"=>"<", "k"=>"=", "l"=>">", "m"=>"?", "n"=>"@", "o"=>"A", "p"=>"B", "q"=>"C", "r"=>"D", "s"=>"E", "t"=>"F", "u"=>"G", "v"=>"H", "w"=>"I", "x"=>"J", "y"=>"K", "z"=>"L"}, {" "=>"M", "!"=>"N", "...
#   end                                                 # => :cipher
# end                                                   # => :cipher
#
# a = Encryptor.new  # => #<Encryptor:0x007ff5ab9456f8>
#
# a.encrypt("hello this is the best", 45)   # => ":7>>AMF:;EM;EMF:7M47EF"
# a.encrypt(":7>>AMF:;EM;EMF:7M47EF", -45)  # => "hello this is the best"
#
# # ~> NoMethodError
# # ~> undefined method `rjust' for nil:NilClass
# # ~>
